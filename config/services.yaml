# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app_name: 'job-runner'
    instance_limits:
        cpu_count: '%env(CPU_COUNT)%'

    'env(AWS_KMS_KEY_ID)': ''
    'env(AWS_LOGS_S3_BUCKET)': ''
    'env(AWS_REGION)': ''
    'env(AZURE_KEY_VAULT_URL)': ''
    'env(AZURE_LOG_ABS_CONNECTION_STRING)': ''
    'env(AZURE_LOG_ABS_CONTAINER)': ''
    'env(JOB_QUEUE_TOKEN)': ''
    'env(JOB_QUEUE_URL)': ''
    'env(STORAGE_API_URL)': ''
    'env(ENCRYPTOR_STACK_ID)': ''
    'env(STORAGE_API_TOKEN)': ''
    'env(JOB_ID)': ''

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Kernel.php}'

    App\Command\RunCommand:
        arguments:
            $instanceLimits: '%instance_limits%'
            $storageApiToken: '%env(STORAGE_API_TOKEN)%'
            $jobId: '%env(JOB_ID)%'

    Keboola\ErrorControl\Uploader\UploaderFactory:
        arguments:
            $storageApiUrl: "%env(STORAGE_API_URL)%"
            $s3Bucket: "%env(AWS_LOGS_S3_BUCKET)%"
            $s3Region: "%env(AWS_REGION)%"
            $absConnectionString: "%env(AZURE_LOG_ABS_CONNECTION_STRING)%"
            $absContainer: "%env(AZURE_LOG_ABS_CONTAINER)%"

    Monolog\Formatter\JsonFormatter:

    Keboola\ErrorControl\Monolog\LogProcessor:
        public: true
        arguments:
            $appName: "%app_name%"
        tags:
            - { name: monolog.processor, method: processRecord }

    Keboola\ObjectEncryptor\EncryptorOptions:
        $stackId: '%env(ENCRYPTOR_STACK_ID)%'
        $kmsKeyId: '%env(AWS_KMS_KEY_ID)%'
        $kmsRegion: '%env(AWS_REGION)%'
        $kmsRole: '%env(default::AWS_KMS_ROLE)%'
        $akvUrl: '%env(AZURE_KEY_VAULT_URL)%'
        $backoffMaxTries: 10

    Keboola\ObjectEncryptor\ObjectEncryptor:
        class: Keboola\ObjectEncryptor\ObjectEncryptor
        factory: ['Keboola\ObjectEncryptor\ObjectEncryptorFactory', 'getEncryptor']

    Keboola\JobQueueInternalClient\JobFactory\ObjectEncryptorProvider\GenericObjectEncryptorProvider:

    Keboola\JobQueueInternalClient\JobFactory\ObjectEncryptorProvider\ObjectEncryptorProviderInterface: '@Keboola\JobQueueInternalClient\JobFactory\ObjectEncryptorProvider\GenericObjectEncryptorProvider'

    Keboola\JobQueueInternalClient\ExistingJobFactory:

    Keboola\JobQueueInternalClient\Client:
        arguments:
            $internalQueueApiUrl: '%env(JOB_QUEUE_URL)%'
            $internalQueueToken: ~
            $storageApiToken: '%env(STORAGE_API_TOKEN)%'

    Keboola\StorageApiBranch\Factory\ClientOptions:
        $url: '%env(STORAGE_API_URL)%'
        $userAgent: 'QueueRunner'
        $logger: ~ # mustn't be autowired, will be configured at runtime
        $backoffMaxTries: 20

    Keboola\StorageApiBranch\Factory\StorageClientPlainFactory:
