pr: none
trigger:
  batch: true
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

variables:
  acrRepositoryMain: 'keboola.azurecr.io'
  acrRepositoryPes: 'keboolapes.azurecr.io'
  garRepository: us-central1-docker.pkg.dev/keboola-prod-artifacts
  garRepositoryProjectId: keboola-prod-artifacts
  imageName: 'job-runner'
  tag: $(Build.BuildId)
  productionTag: production-$(Build.SourceVersion)

stages:
  - stage: prepare
    displayName: Prepare & Test
    pool:
      name: 'Default'
    jobs:
      - job: test
        displayName: 'Test'
        steps:
          - task: Docker@2
            displayName: Test ACR login
            inputs:
              command: login
              containerRegistry: 'Keboola PS Test ACR'

          - script: ./provisioning/ci/pipelines-scripts/terraform-install.sh
            displayName: 'Install Terraform'

          - script: ./provisioning/ci/pipelines-scripts/terraform-init.sh
            displayName: Init Terraform
            env:
              AWS_ACCESS_KEY_ID: $(TERRAFORM_AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(TERRAFORM_AWS_SECRET_ACCESS_KEY)

          - script: ./provisioning/ci/update-env.sh -v -e .env -a aws
            displayName: Configure ENV
            env:
              AWS_ACCESS_KEY_ID: $(TERRAFORM_AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(TERRAFORM_AWS_SECRET_ACCESS_KEY)

          - script: |
              set -e
              docker-compose down
              docker-compose build
              docker-compose pull internal-api
            displayName: 'Build Tests'

          - script: |
              set -e
              docker-compose up -d internal-api
              docker-compose logs internal-api

              docker-compose run ci
            displayName: 'Run Tests'
            env:
              TEST_STORAGE_API_TOKEN: $(TEST_STORAGE_API_TOKEN)
              TEST_STORAGE_API_TOKEN_MASTER: $(TEST_STORAGE_API_TOKEN_MASTER)

          - script: |
              set -Eeuo pipefail

              docker image save keboola/$(imageName):latest -o $(Build.ArtifactStagingDirectory)/build-image.tar
            displayName: 'Save image'

          - publish: $(Build.ArtifactStagingDirectory)
            artifact: docker-images
            displayName: 'Publish artifacts'

  # Push test image to test ACR
  - stage: deploy_test
    displayName: Deploy Test
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job: deploy
        displayName: 'Deploy'
        steps:
          - download: current
            artifact: docker-images
            displayName: 'Download artifacts'

          - script: |
              set -Eeuo pipefail
              docker load --input $(Pipeline.Workspace)/docker-images/build-image.tar

              docker tag keboola/$(imageName):latest keboola/$(imageName):$(productionTag)
              docker tag keboola/$(imageName):latest keboola/$(imageName):$(tag)

              docker tag keboola/$(imageName):latest $(acrRepositoryPes)/$(imageName):$(productionTag)
              docker tag keboola/$(imageName):latest $(acrRepositoryPes)/$(imageName):$(tag)
              docker tag keboola/$(imageName):latest $(acrRepositoryPes)/$(imageName):latest
            displayName: 'Load image'

          # Push test image to test AWS ECR
          - task: ECRPushImage@1
            displayName: 'Push ECR [$(productionTag)]'
            inputs:
              regionName: 'eu-central-1'
              imageSource: 'imagename'
              sourceImageName: keboola/$(imageName)
              sourceImageTag: $(tag)
              repositoryName: 'keboola/$(imageName)'
              pushTag: $(productionTag)
              autoCreateRepository: true
            env:
              AWS_ACCESS_KEY_ID: $(TEST_AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(TEST_AWS_SECRET_ACCESS_KEY)

          - task: ECRPushImage@1
            displayName: 'Push ECR [$(tag)]'
            inputs:
              regionName: 'eu-central-1'
              imageSource: 'imagename'
              sourceImageName: keboola/$(imageName)
              sourceImageTag: $(tag)
              repositoryName: 'keboola/$(imageName)'
              pushTag: $(productionTag)
              autoCreateRepository: true
            env:
              AWS_ACCESS_KEY_ID: $(TEST_AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(TEST_AWS_SECRET_ACCESS_KEY)

          - task: ECRPushImage@1
            displayName: 'Push ECR latest'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              regionName: 'eu-central-1'
              imageSource: 'imagename'
              sourceImageName: keboola/$(imageName)
              sourceImageTag: 'latest'
              repositoryName: 'keboola/$(imageName)'
              pushTag: 'latest'
              autoCreateRepository: true
            env:
              AWS_ACCESS_KEY_ID: $(TEST_AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(TEST_AWS_SECRET_ACCESS_KEY)

          - task: Docker@2
            displayName: 'Push ACR [$(productionTag), $(tag)]'
            inputs:
              command: push
              containerRegistry: 'Keboola PS Test ACR'
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              repository: $(imageName)
              tags: |
                $(productionTag)
                $(tag)

          - task: Docker@2
            displayName: 'Push ACR [latest]'
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              command: push
              containerRegistry: 'Keboola PS Test ACR'
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              repository: $(imageName)
              tags: |
                latest

  # Push image to production
  - stage:
    displayName: Deploy Production
    dependsOn: prepare
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job: deploy
        displayName: 'Deploy'
        steps:
          - download: current
            artifact: docker-images
            displayName: 'Download artifacts'

          - script: |
              set -Eeuo pipefail
              docker load --input $(Pipeline.Workspace)/docker-images/build-image.tar
              docker tag keboola/$(imageName):latest keboola/$(imageName):$(productionTag)
              docker tag keboola/$(imageName):latest $(garRepository)/$(imageName)/$(imageName):$(productionTag)
              docker tag keboola/$(imageName):latest $(acrRepositoryMain)/$(imageName):$(productionTag)
            displayName: 'Load image'

          - task: ECRPushImage@1
            displayName: 'Push to ECR [$(productionTag)]'
            inputs:
              awsCredentials: 'Production - ECR Distribution'
              regionName: 'us-east-1'
              imageSource: 'imagename'
              sourceImageName: keboola/$(imageName)
              sourceImageTag: latest
              repositoryName: 'keboola/$(imageName)'
              pushTag: $(productionTag)

          - task: Docker@2
            displayName: 'Push to GAR [$(productionTag)]'
            inputs:
              command: push
              containerRegistry: 'Keboola GAR'
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              repository: '$(garRepositoryProjectId)/$(imageName)/$(imageName)'
              tags: $(productionTag)

          - task: Docker@2
            displayName: 'Push to ACR $(productionTag)'
            inputs:
              command: push
              containerRegistry: 'Keboola ACR'
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              repository: $(imageName)
              tags: |
                $(productionTag)

          - task: Docker@2
            displayName: 'Push to Docker Hub $(productionTag)'
            inputs:
              command: push
              containerRegistry: 'Docker Hub'
              repository: keboola/$(imageName)
              tags: |
                $(productionTag)

          - script: |
              printf "%s" "$(productionTag)" > artifact
            displayName: Create artifact

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'artifact'
              artifact: 'keboola.job-runner.latest-build'


  # Push image to production (dev-* tags)
  - stage:
    displayName: Deploy Production (dev-* tags)
    dependsOn: prepare
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/dev-'))
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job:
        displayName: Publish Production Images (dev tag)
        variables:
          - name: dockerTag
            value: ${{ replace(variables['Build.SourceBranch'],'refs/tags/','') }}
        steps:
          - download: current
            artifact: docker-images
            displayName: 'Download artifacts'

          - script: |
              set -Eeuo pipefail
              docker load --input $(Pipeline.Workspace)/docker-images/build-image.tar
              docker tag keboola/$(imageName):latest keboola/$(imageName):$(dockerTag)
              docker tag keboola/$(imageName):latest $(garRepository)/$(imageName)/$(imageName):$(dockerTag)
              docker tag keboola/$(imageName):latest $(acrRepositoryMain)/$(imageName):$(dockerTag)
            displayName: 'Load image'

          - task: ECRPushImage@1
            displayName: 'Push to ECR [$(dockerTag)]'
            inputs:
              awsCredentials: 'Production - ECR Distribution'
              regionName: 'us-east-1'
              imageSource: 'imagename'
              sourceImageName: keboola/$(imageName)
              sourceImageTag: latest
              repositoryName: 'keboola/$(imageName)'
              pushTag: $(dockerTag)

          - task: Docker@2
            displayName: 'Push to GAR [$(dockerTag)]'
            inputs:
              command: push
              containerRegistry: 'Keboola GAR'
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              repository: '$(garRepositoryProjectId)/$(imageName)/$(imageName)'
              tags: $(dockerTag)

          - task: Docker@2
            displayName: 'Push to ACR [$(dockerTag)]'
            inputs:
              command: push
              containerRegistry: 'Keboola ACR'
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              repository: $(imageName)
              tags: $(dockerTag)

          - task: Docker@2
            displayName: 'Push to Docker Hub [$(dockerTag)]'
            inputs:
              command: push
              containerRegistry: 'Docker Hub'
              repository: keboola/$(imageName)
              tags: $(dockerTag)
